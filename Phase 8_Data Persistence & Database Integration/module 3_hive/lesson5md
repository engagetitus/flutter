# Lesson 5: Best Practices

**Objective:** Learn the best practices for using Hive.

## 1. Use Boxes Wisely

Open boxes once at the start of the application and keep them open for the app's lifetime. This avoids the overhead of opening and closing boxes multiple times.

**Example:**

```dart
void main() async {
  await Hive.initFlutter();
  var myBox = await Hive.openBox('myBox');
  runApp(MyApp(myBox: myBox));
}

class MyApp extends StatelessWidget {
  final Box myBox;

  MyApp({required this.myBox});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: MyHomePage(myBox: myBox),
    );
  }
}

class MyHomePage extends StatelessWidget {
  final Box myBox;

  MyHomePage({required this.myBox});

  @override
  Widget build(BuildContext context) {
    // Use myBox for read/write operations
    return Scaffold(
      appBar: AppBar(
        title: Text('Hive Best Practices'),
      ),
      body: Center(
        child: Text('Open boxes once and keep them open!'),
      ),
    );
  }
}
```

### 2. Avoid Unnecessary Reads/Writes

Minimize the frequency of read/write operations to reduce the performance impact on your application.

**Example:**

```dart
class DataManager {
  final Box box;

  DataManager(this.box);

  Future<void> saveData(String key, String value) async {
    // Check if the value has changed before writing
    if (box.get(key) != value) {
      await box.put(key, value);
    }
  }

  String? getData(String key) {
    return box.get(key);
  }
}
```

### 3. Use Custom Adapters

For complex data structures, create and use custom adapters to manage serialization and deserialization.

**Example:**

Define the model and generate the adapter:

```dart
import 'package:hive/hive.dart';

part 'user.g.dart';

@HiveType(typeId: 0)
class User extends HiveObject {
  @HiveField(0)
  String name;

  @HiveField(1)
  int age;

  User({required this.name, required this.age});
}

// Generate the adapter using the following command:
// flutter packages pub run build_runner build
```

Register the adapter and use the model:

```dart
void main() async {
  await Hive.initFlutter();
  Hive.registerAdapter(UserAdapter());
  var userBox = await Hive.openBox<User>('userBox');
  runApp(MyApp(userBox: userBox));
}

class MyApp extends StatelessWidget {
  final Box<User> userBox;

  MyApp({required this.userBox});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: UserScreen(userBox: userBox),
    );
  }
}

class UserScreen extends StatelessWidget {
  final Box<User> userBox;

  UserScreen({required this.userBox});

  @override
  Widget build(BuildContext context) {
    // Use userBox for read/write operations with User objects
    return Scaffold(
      appBar: AppBar(
        title: Text('Hive Custom Adapters'),
      ),
      body: Center(
        child: Text('Use custom adapters for complex data structures!'),
      ),
    );
  }
}
```

### 4. Encrypt Sensitive Data

Use encryption to store sensitive data securely.

**Example:**

Generate a secure encryption key and use it to open an encrypted box:

```dart
import 'dart:convert';
import 'dart:typed_data';
import 'package:crypto/crypto.dart';
import 'package:hive/hive.dart';

Uint8List generateKey(String password) {
  final key = sha256.convert(utf8.encode(password)).bytes;
  return Uint8List.fromList(key);
}

Future<void> saveSecureData(String key, String value, String password) async {
  final encryptionKey = generateKey(password);
  var encryptedBox = await Hive.openBox('secureBox', encryptionCipher: HiveAesCipher(encryptionKey));
  await encryptedBox.put(key, value);
}

Future<String?> readSecureData(String key, String password) async {
  final encryptionKey = generateKey(password);
  var encryptedBox = await Hive.openBox('secureBox', encryptionCipher: HiveAesCipher(encryptionKey));
  return encryptedBox.get(key);
}

void main() async {
  await Hive.initFlutter();
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: SecureDataScreen(),
    );
  }
}

class SecureDataScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Hive Encryption Example'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () async {
            await saveSecureData('secret', 'This is a secret', 'password123');
            String? secret = await readSecureData('secret', 'password123');
            print('Retrieved secret: $secret');
          },
          child: Text('Save and Read Secure Data'),
        ),
      ),
    );
  }
}
```
